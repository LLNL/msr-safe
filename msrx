#!/bin/bash
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"

usage() {
echo "msrx:  Write or dump a subset of model-specific registers."
echo "       Distributed with libmsr/msr-safe."
echo "       Note:  this utility depends on the msr kernel module"
echo "       and the msrtools utilities readmsr and writemsr. Unless"
echo "       default permission in /dev/cpu/*/msr have been changed,"
echo "       this utility must be run as root."
echo ""
echo ""
echo "-i[=INFILE] 	--infile[=INFILE]	file specifying new values to write to the MSRs."
echo "-o[=OUTFILE]	--outfile[=OUTFILE] 	file to record existing MSR values."
echo "-h 		--help "
echo ""
echo ""
echo "EXAMPLES"
echo ""
echo ""
echo "sh msrx -i=INFILE"
echo "		Read (CoreID, Address, Value) tuples from stdin (default) or"
echo "		specified filename.  Fields are space-separated and any "
echo "		remaining fields are ignored.  A line containing"
echo "			13 0x0C1 0"
echo "		writes the value 0 to address 0x0C1 on device /dev/cpu/13/msr."
echo ""
echo ""
echo "sh msrx -o=OUTFILE"
echo "		Dumps the (Core ID, MSR address, value) tuple for all predefined MSRs"
echo "		across all Core IDs to stdout (default) or the specified file."
echo ""
echo ""
echo "sh msrx -o=backup -i=new.config -o=validate"
echo "		Dumps the existing MSR values to \"backup\", loads a new set of msr"
echo "		values from \"new.config\", then dumps the new values to \"validate.cfg\"."
echo "		This may be useful in determining which MSRs are read-only, which values"
echo "		change quickly, etc."
echo "		NOTE:  This functionality depends on \"getopt\" not reordering paramters."
}


write_msrs() {
file=${INFILE}
while read line
do
	array=($line) # This stores each line in an array

	# If a value was not read from one of the addresses, it will not write that MSR back
	if [ ${array[2]} != "0x" ] 
	then
		# Writing each MSR back to it's value from the configuration file. 
		echo " ${array[0]} ${array[1]} ${array[2]}"
		echo "$(wrmsr -p${array[0]} ${array[1]} ${array[2]})" > /dev/null 2>&1;
	fi
done < ${INFILE}
}



read_msrs() {
threadID=0
file=${OUTFILE}
for i in /dev/cpu/*/msr_safe
do
	#
	#	MSR Name			Address		Mask in msr-safe
	#
	#	SMSR_PMC0,			0x0C1		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x0C1)
	result="0x${result}"
	printf "%3d 0x0C1 %17s SMSR_PMC0: Perfmance counter 0 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC1,			0x0C2		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x0C2)
	result="0x${result}"
	printf "%3d 0x0C2 %17s SMSR_PMC1: Perfmance counter 1 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC2,			0x0C3		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x0C3)
	result="0x${result}"
	printf "%3d 0x0C3 %17s SMSR_PMC2: Perfmance counter 2 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC3,			0x0C4		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x0C4)
	result="0x${result}"
	printf "%3d 0x0C4 %17s SMSR_PMC3: Perfmance counter 3 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC4,			0x0C5		0xFFFFFFFF, 0xFFFFFFFF 
###	result=$(rdmsr -p$threadID 0x0C5)
###	result="0x${result}"
###	printf "%3d 0x0C5 %17s SMSR_PMC4: Perfmance counter 4 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC5,			0x0C6		0xFFFFFFFF, 0xFFFFFFFF 
###	result=$(rdmsr -p$threadID 0x0C6)
###	result="0x${result}"
###	printf "%3d 0x0C6 %17s SMSR_PMC5: Perfmance counter 5 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC6,			0x0C7		0xFFFFFFFF, 0xFFFFFFFF 
###	result=$(rdmsr -p$threadID 0x0C7)
###	result="0x${result}"
###	printf "%3d 0x0C7 %17s SMSR_PMC6: Perfmance counter 6 accumulator.\n" $threadID $result >> $file

	#	SMSR_PMC7,			0x0C8		0xFFFFFFFF, 0xFFFFFFFF 
###	result=$(rdmsr -p$threadID 0x0C8)
###	result="0x${result}"
###	printf "%3d 0x0C8 %17s SMSR_PMC7: Perfmance counter 7 accumulator.\n" $threadID $result >> $file
	
	#	SMSR_PERFEVTSEL0		0x186		0xFFFFFFFF, 0x0   
	result=$(rdmsr -p$threadID 0x186)
	result="0x${result}"
	printf "%3d 0x186 %17s SMSR_PERFEVTSEL0: Performance counter 0 event select\n" $threadID $result >> $file        


	#	SMSR_PERFEVTSEL1,		0x187		0xFFFFFFFF, 0x0        
	result=$(rdmsr -p$threadID 0x187)
	result="0x${result}"
	printf "%3d 0x187 %17s SMSR_PERFEVTSEL1: Performance counter 1 event select\n" $threadID $result >> $file 

	#	SMSR_PERFEVTSEL2,		0x188		0xFFFFFFFF, 0x0        
	result=$(rdmsr -p$threadID 0x188)
	result="0x${result}"
	printf "%3d 0x188 %17s SMSR_PERFEVTSEL2: Performance counter 2 event select\n" $threadID $result >> $file

	#	SMSR_PERFEVTSEL3,		0x189		0xFFFFFFFF, 0x0        
	result=$(rdmsr -p$threadID 0x189)
	result="0x${result}"
	printf "%3d 0x189 %17s SMSR_PERFEVTSEL3: Performance counter 3 event select\n" $threadID $result >> $file

	#	SMSR_PERFEVTSEL4,		0x18A,		0xFFFFFFFF, 0x0        
###	result=$(rdmsr -p$threadID 0x18A)
###	result="0x${result}"
###	printf "%3d 0x18A %17s SMSR_PERFEVTSEL4: Performance counter 4 event select\n" $threadID $result >> $file

	#	SMSR_PERFEVTSEL5,		0x18B		0xFFFFFFFF, 0x0        
###	result=$(rdmsr -p$threadID 0x18B)
###	result="0x${result}"
###	printf "%3d 0x18B %17s SMSR_PERFEVTSEL5: Performance counter 5 event select\n" $threadID $result >> $file

	#	SMSR_PERFEVTSEL6,		0x18C		0xFFFFFFFF, 0x0        
###	result=$(rdmsr -p$threadID 0x18C)
###	result="0x${result}"
###	printf "%3d 0x18C %17s SMSR_PERFEVTSEL6: Performance counter 6 event select\n" $threadID $result >> $file

	#	SMSR_PERFEVTSEL7,		0x18D		0xFFFFFFFF, 0x0        
###	result=$(rdmsr -p$threadID 0x18D)
###	result="0x${result}"
###	printf "%3d 0x18D %17s SMSR_PERFEVTSEL7: Performance counter 7 event select\n" $threadID $result >> $file
	
	#	SMSR_PERF_CTL,			0x199		0x0, 0x00000001 
	result=$(rdmsr -p$threadID 0x199)
	result="0x${result}"
	printf "%3d 0x199 %17s SMSR_PERF_CTRL: Performance counter control\n" $threadID $result >> $file

	#	SMSR_CLOCK_MODULATION,		0x19A		0x00000007, 0x0        
	result=$(rdmsr -p$threadID 0x19A)
	result="0x${result}"
	printf "%3d 0x19A %17s SMSR_CLOCK_MODULATION:  Clock gating control\n" $threadID $result >> $file

	#	SMSR_THERM_INTERRUPT,		0x19B		0x01FFFF0F, 0x0        
	result=$(rdmsr -p$threadID 0x19B)
	result="0x${result}"
	printf "%3d 0x19B %17s SMSR_THERM_INTERRUPT: Thermal interrupt control\n" $threadID $result >> $file

	#	SMSR_THERM_STATUS,		0x19C		0x00000AAA, 0x0        
	result=$(rdmsr -p$threadID 0x19C)
	result="0x${result}"
	printf "%3d 0x19C %17s SMSR_THERM_STATUS: Temperature\n" $threadID $result >> $file

	#	SMSR_MISC_ENABLE,		0x1A0		0x00010000, 0x00000040 
	result=$(rdmsr -p$threadID 0x1A0)
	result="0x${result}"
	printf "%3d 0x1A0 %17s SMSR_MISC_ENABLE: Miscellaneous feature control\n" $threadID $result >> $file

	#	SMSR_OFFCORE_RSP_0,		0x1A6		0xFFFF8FFF, 0x0000003F 
	result=$(rdmsr -p$threadID 0x1A6)
	result="0x${result}"
	printf "%3d 0x1A6 %17s SMSR_OFFCORE_RSP_0: Off-core cache counter\n" $threadID $result >> $file

	#	SMSR_OFFCORE_RSP_1,		0x1A7		0xFFFF8FFF, 0x0000003F 
	result=$(rdmsr -p$threadID 0x1A7)
	result="0x${result}"
	printf "%3d 0x1A7 %17s SMSR_OFFCORE_RSP_1: Off-core cache counter\n" $threadID $result >> $file
	
	#	SMSR_ENERGY_PERF_BIAS,		0x1B0		0xF, 0x0        
	result=$(rdmsr -p$threadID 0x1B0)
	result="0x${result}"
	printf "%3d 0x1B0 %17s SMSR_ENERGY_PERF_BIAS: Energy distribution hint\n" $threadID $result >> $file

	#	SMSR_PACKAGE_THERM_STATUS,	0x1B1		0x00000555, 0x0        
	result=$(rdmsr -p$threadID 0x1B1)
	result="0x${result}"
	printf "%3d 0x1B1 %17s SMSR_PACKAGE_THERM_STATUS:  Package temperature\n" $threadID $result >> $file

	#	SMSR_PACKAGE_THERM_INTERRUPT,	0x1B2		0x01FFFF07, 0x0        
	result=$(rdmsr -p$threadID 0x1B2)
	result="0x${result}"
	printf "%3d 0x1B2 %17s SMSR_PACKAGE_THERM_INTERRUPT: Package temperature interrupt\n" $threadID $result >> $file
	
	#	SMSR_FIXED_CTR0,		0x309		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x309)
	result="0x${result}"
	printf "%3d 0x309 %17s SMSR_FIXED_CTR0: Fixed counter 0.\n" $threadID $result >> $file

	#	SMSR_FIXED_CTR1,		0x30A		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x30A)
	result="0x${result}"
	printf "%3d 0x30A %17s SMSR_FIXED_CTR1: Fixed counter 1.\n" $threadID $result >> $file

	#	SMSR_FIXED_CTR2,		0x30B 		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x30B)
	result="0x${result}"
	printf "%3d 0x30B %17s SMSR_FIXED_CTR2: Fixed counter 2.\n" $threadID $result >> $file

	#	SMSR_FIXED_CTR_CTRL,		0x38D		0x00000BBB, 0x0        
	result=$(rdmsr -p$threadID 0x38D)
	result="0x${result}"
	printf "%3d 0x38D %17s SMSR_FIXED_CTR_CRL: Fixed counter control.\n" $threadID $result >> $file
	
	#	SMSR_PERF_GLOBAL_CTRL,		0x38F 		0x00000003, 0x00000007 
	result=$(rdmsr -p$threadID 0x38F)
	result="0x${result}"
	printf "%3d 0x38F %17s SMSR_PERF_GLOBAL_CTRL: Global performance counter control.\n"  $threadID $result >> $file

	#	SMSR_PERF_GLOBAL_OVF_CTRL,	0x390		0x00000003, 0xC0000007 
	result=$(rdmsr -p$threadID 0x390)
	result="0x${result}"
	printf "%3d 0x390 %17s SMSR_PERF_GLOBAL_OVFPCTRL: Global performance counter overflows control.\n" $threadID $result >> $file

	#	SMSR_PEBS_ENABLE,		0x3F1		0x0000000F, 0x0000000F 
	result=$(rdmsr -p$threadID 0x3F1)
	result="0x${result}"
	printf "%3d 0x3F1 %17s SMSR_PEBS_ENABLE: PEBS control\n" $threadID $result >> $file

	#	SMSR_PEBS_LD_LAT,		0x3F6		0x0000FFFF, 0x0        
	result=$(rdmsr -p$threadID 0x3F6)
	result="0x${result}"
	printf "%3d 0x3F6 %17s SMSR_PEBS_LD_LAT: Memory latency counter threshold\n" $threadID $result >> $file
	
	#	SMSR_PKG_POWER_LIMIT,		0x610		0x00FFFFFF, 0x00FFFFFF 
	result=$(rdmsr -p$threadID 0x610)
	result="0x${result}"
	printf "%3d 0x610 %17s SMSR_PKG_POWER_LIMIT: Package power limit\n" $threadID $result >> $file

	#	SMSR_PP0_POWER_LIMIT,		0x638		0x00FFFFFF, 0x0        
	result=$(rdmsr -p$threadID 0x638)
	result="0x${result}"
	printf "%3d 0x638 %17s SMSR_PP0_POWER_LIMIT: Power Plane 0 power limit\n" $threadID $result >> $file

	
	#	SMSR_TURBO_RATIO_LIMIT,		0x1AD 		0xFFFFFFFF, 0xFFFFFFFF 
	result=$(rdmsr -p$threadID 0x1AD)
	result="0x${result}"
	printf "%3d 0x1Ad %17s SMSR_TURBO_RATIO_LIMIT: Max turbo ratio limit\n" $threadID $result >> $file

	#	SMSR_DRAM_POWER_LIMIT,		0x618		0x00FFFFFF, 0x0        
	result=$(rdmsr -p$threadID 0x618)
	result="0x${result}"
	printf "%3d 0x618 %17s SMSR_DRAM_POWER_LIMIT: DRAM power limit\n" $threadID $result >> $file

	threadID=$[$threadID +1];
done
}


TEMP=`getopt -a -o hi::o:: --long version,help,infile::,outfile:: -n "msrx" -- "$@"`
eval set -- "$TEMP"	
while true; do		
	case "$1" in
		-i|--infile)
			case "$2" in 	
				'') INFILE=/proc/${$}/fd/0 ; shift 2 ;;	
				*)  INFILE=$2 ;		     shift 2 ;;
			esac 
			write_msrs;;

		-o|--outfile)
			case "$2" in 
				'') OUTFILE=/proc/${$}/fd/1 ; shift 2 ;;
				*)  OUTFILE=$2 ;              shift 2 ;;
			esac 
			echo "Writing to ${OUTFILE}"
			read_msrs;;

		-h|--help)
			usage;
			exit 0;;
		--)
			shift ; break ;;
		*)
			echo "Unexpected parameter:  ${1}" i; exit 1;;
	esac 
done

