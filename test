#!/usr/bin/perl
use strict;

use Fcntl;

my $msrfd;

sub read_msr {
  my ($msr) = @_;
  my ($ret, $data, $d1, $d2);

  if (!sysseek($msrfd, $msr, Fcntl::SEEK_SET)) {
    print sprintf("Error seeking to MSR 0x%x: %s\n", $msr, $!);
    return;
  }

  $ret = sysread($msrfd, $data, 8);
  if (!defined $ret) {
    print sprintf("Error reading MSR 0x%x: %s\n", $msr, $!);
    return;
  } elsif ($ret == 0) {
    print sprintf("EOF reading MSR 0x%x\n", $msr);
    return;
  } elsif ($ret != 8) {
    print sprintf("Only read %d bytes while reading MSR 0x%x\n", $ret, $msr);
  }

  ($d1, $d2) = unpack("LL", $data);
  print sprintf("MSR 0x%x returned %08x%08x\n", $msr, $d2, $d1);
}


sub write_msr {
  my ($msr, $v1, $v2) = @_;
  my ($ret, $data);

  if (!sysseek($msrfd, $msr, Fcntl::SEEK_SET)) {
    print sprintf("Error seeking to MSR 0x%x: %s\n", $msr, $!);
    return;
  }

  print sprintf("Writing 0x%08x%08x to MSR 0x%x\n", $v1, $v2, $msr);
  $data= pack("LL", $v2, $v1);
  $ret = syswrite($msrfd, $data, 8);
  if (!defined $ret) {
    print sprintf("Error writing MSR 0x%x: %s\n", $msr, $!);
    return;
  } elsif ($ret != 8) {
    print sprintf("Only wrote %d bytes to MSR 0x%x\n", $ret, $msr);
  }

  read_msr($msr);
}



die "You must specify a device" if (! -e $ARGV[0]);
open ($msrfd, "+<$ARGV[0]") || die "Could not open $ARGV[0]: $!";

read_msr(0);
read_msr(1);
read_msr(2);
read_msr(0x10);
read_msr(0x17);
read_msr(0xe7);
read_msr(0xe8);
write_msr(0xe7, 1, 0);
write_msr(0xe8, 0, 0);
