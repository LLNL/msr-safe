This patch addresses the following two problems:
  1. Users currently must have either all access to MSRs or none.
     Changing MSR data for certain MSRs could negatively impact system
     performance.

  2. In order to create utilities which will dynamically make adjustments
     in order to maximize performance, power, and thermal efficiency, it
     is necessary to monitor and adjust MSR information at the thread,
     core, and socket level with a high degree of frequency.

The current implementation allows for one MSR operation per calling
process. The overhead of this thread becomes significant when the MSR is
located on a different processor than the calling process.  Further, a
system call is required for each MSR operation.

Problem #1 is addressed by introducing a whitelist policy for MSR access.
Further, a batch meachnism is added to address problem #2.

[PATCH 1/3] - x86: Move msr.c to msr_entry.c.
    This was done in preparation for providing the overall MSR kernel
    module as a set of three implementation files: msr_entry.c,
    msr_whitelist.c, and msr_batch.c.

    The only additonal changes made besides renaming were so that
    scripts/checkpatch.pl would stop complaining.

[PATCH 2/3] - x86: MSR Whitelist implementation
    This patch will allow the administrator to configure a set of bit
    masks for MSRs where access is desrired.

    Whitelist Administration:
        To configure whitelist (as root):
            cat whitelistfile > /dev/cpu/msr_whitelist

            This operation will cause the previous whitelist to be
            replaced by the specified whitelist.

        To enumerate current whitelist (as root):
            cat < /dev/cpu/msr_whitelist

        To remove whitelist (as root):
            echo > /dev/cpu/msr_whitelist

        Security model:
            If user has CAP_SYS_RAWIO privileges, they will enjoy full
            access to MSRs like they do today.

            Otherwise, if the user is able to open the /dev/cpu/*/msr
            file, they will have access to MSR operations as follows:

                If the write mask exists for an MSR, then rdmsr access is
                always granted.

                If the write mask is set to all ones (0xffffffffffffffff),
                then the user may perform a "raw" wrmsr operation with all
                64 bits being overwritten.

                If the write mask is between 0 and 0xffffffffffffffff,
                then a rdmsr will be performed first and only the bits
                allowed from the write mask will be affected in the MSR.

[PATCH 3/3] - x86: MSR batch processing feature
    This patch will allow for a new ioctl interface to /dev/cpu/msr_batch.
    Each element in the batch list will be subject to the whitelist
    security model described above.

    This implementation will cause an Inter Processor Interrupt to be sent
    to each destination processor and will wait until all processors have
    finished processing their respective MSR operations before returning.

    Implementation Note: A separate "error" field is maintained per MSR
    operation in order to maintain reentrancy.
